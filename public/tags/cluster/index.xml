<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>cluster on %&gt;% dreams</title>
  <link>/tags/cluster/</link>
  <description>Recent content in cluster on %&gt;% dreams</description>
  <generator>Hugo -- gohugo.io</generator>
<language>en-us</language>
<lastBuildDate>Sat, 06 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="/tags/cluster/index.xml" rel="self" type="application/rss+xml" />
<item>
  <title>Taking A Peek into My Hiking Data</title>
  <link>/blog/average-hike/</link>
  <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
  
<guid>/blog/average-hike/</guid>
  <description>


&lt;p&gt;I moved to Seattle at the end of 2016 and since then have done over 100 hikes (depending on your definition of ‘a hike’!). I must admit I’ve been abysmal at tracking any data regarding my hiking activity beyond a &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1Y3NdGea6yVuoDS7ewUKmuKGZouzU62FHK-aY813TafA/edit?usp=sharing&#34;&gt;Google spreadsheet&lt;/a&gt;, despite the ubiquity of trail tracking apps that exist.&lt;/p&gt;
&lt;p&gt;Recently, I signed up on &lt;a href=&#34;https://www.alltrails.com/&#34;&gt;AllTrails&lt;/a&gt; to start collecting data on my hikes. The Pro service offers many wonderful features, including the ability to download GPX data on hikes. I was so excited by this that I decided to try to visualize the hikes I have done.&lt;/p&gt;
&lt;p&gt;I’m structuring this article a bit differently with the results/visualizations first, but for anybody dying to see the data cleaning process, please see the &lt;a href=&#34;#methodology&#34;&gt;Methodology&lt;/a&gt; or &lt;a href=&#34;#viz&#34;&gt;Visualizations&lt;/a&gt; sections below! (Interesting, I ran &lt;a href=&#34;https://twitter.com/ivelasq3/status/1121536896956428289&#34;&gt;a poll on Twitter&lt;/a&gt; in which I asked whether people embed code in the main text of their blog post or at the end. 91% embed in the main text [n = 85]! Still, I prefer having the code at the end).&lt;/p&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis&lt;/h1&gt;
&lt;div id=&#34;disclaimer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;For data collection, I downloaded each trail’s GPX files from AllTrails. Because these data are proprietary, I will not be providing them. Some things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because these are data pulled from the website, they are not indicative of my actual hiking path (for example, Franklin Falls is a 2 mile hike in the summer, but in the winter is a 6 mile snowshoe).&lt;/li&gt;
&lt;li&gt;There are hikes that I did back-to-back that I’d consider one hike but the trails might be listed separately on the site. For example, Deception Pass is actually made up of three small loops.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;the-hikes-are-wide-and-varied&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The hikes are wide and varied&lt;/h2&gt;
&lt;p&gt;Being fortunate enough to live near multiple mountain ranges, the hikes I’ve been on come in all shapes and sizes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/joyplot.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I calculated my ‘average hike’ - that is, the average elevation given the cumulative distance travelled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/avg_hike.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aggregated-data-by-trail&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Aggregated Data by Trail&lt;/h2&gt;
&lt;p&gt;In the aggregate, there seems to be a correlation (r^2 = 0.48) between total distance and total elevation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/tot_dis_elev.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;there-exist-categories-of-hikes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;There Exist Categories of Hikes&lt;/h2&gt;
&lt;p&gt;I ran a quick &lt;a href=&#34;https://uc-r.github.io/kmeans_clustering&#34;&gt;cluster analysis&lt;/a&gt; to see if I can categorize my hikes in any way. Code is in the &lt;a href=&#34;#methodology&#34;&gt;Methodology&lt;/a&gt; section. Four clusters seemed to be optimal. I have dubbed them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cluster 1: “Let’s Get This Over With” (steep &amp;amp; hard)&lt;/li&gt;
&lt;li&gt;Cluster 2: “Easy Peasy Lemon Squeezy” (short &amp;amp; flat)&lt;/li&gt;
&lt;li&gt;Cluster 3: “The Sweet Spot” (not too long, not too high)&lt;/li&gt;
&lt;li&gt;Cluster 4: “I Don’t Care About My Knees Anyway” (too long for my own good)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/cluster_analysis.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;i-dont-particularly-love-long-hikes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;I don’t particularly love long hikes&lt;/h2&gt;
&lt;p&gt;My average hike is 6.4 miles - and most of them are concentrated around that distance. This makes sense as I usually day hike and need to get back at a reasonable time. My shortest hike was 1.18 miles and my longest was 17.85 (the Enchantments…). In these 90 hikes, I hiked around 576 miles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/dist_histogram.png&#34; /&gt; &lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/cum_dist.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;i-dont-dislike-high-elevation-hikes-though&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;I don’t dislike high elevation hikes though&lt;/h2&gt;
&lt;p&gt;Elevation on these hikes ranged from ~0 feet to 4580 feet gain. I averaged 1455.4 feet gain and have climbed 130,984 feet (~24 miles!).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/elev_histogram.png&#34; /&gt; &lt;img src=&#34;https://ivelasq.rbind.io/img/average-hike_files/cum_elev.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;methodology&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Methodology&lt;/h1&gt;
&lt;div id=&#34;choose-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Choose Packages&lt;/h2&gt;
&lt;p&gt;It took a bit to decide which packages had the functions needed to run the spatial analyses. In the end, I decided on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;plotKML&lt;/strong&gt;: A package containing functions to read GPX files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;geosphere&lt;/strong&gt;: A package containing functions for geospatial calculations. I decided to use this for finding out distances between lon/lat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;googleway&lt;/strong&gt;: A package allowing access to the Google Maps API. To run this, you need to obtain a Google Maps API key and load it to R by using &lt;code&gt;set_key()&lt;/code&gt;. I use this for elevation calculations but the API can also obtain distance between points.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(googleway)
library(plotKML)
library(geosphere)

googleway::set_key(API_KEY_HERE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;upload-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Upload Data&lt;/h2&gt;
&lt;p&gt;I downloaded each GPX file from AllTrails and saved them in a file in my project organization. Their file names were TRAILNAME.gpx.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;plotKML::readGPX()&lt;/code&gt; results in the files being loaded as lists.&lt;/li&gt;
&lt;li&gt;I used &lt;code&gt;purrr&lt;/code&gt; in conjunction with &lt;code&gt;plotKML()&lt;/code&gt; to handily read them in and add the file name to the list.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# find gpx files
data_path &amp;lt;- 
  here::here(&amp;quot;data&amp;quot;, &amp;quot;raw&amp;quot;, &amp;quot;gpx_files&amp;quot;)

files &amp;lt;-
  dir(data_path, pattern = &amp;quot;*.gpx&amp;quot;, full.names = TRUE)

# get trail names
names &amp;lt;-
  dir(data_path, pattern = &amp;quot;*.gpx&amp;quot;, full.names = FALSE) %&amp;gt;% 
  str_extract(&amp;quot;.+?(?=.gpx)&amp;quot;)

# read all gpx files
gpx_dat &amp;lt;-
  map2(files,
       names,
       ~ readGPX(.x,
         metadata = TRUE,
         bounds = TRUE,
         waypoints = TRUE,
         tracks = TRUE,
         routes = TRUE) %&amp;gt;%
         list_modify(trail = .y)) # otherwise you can&amp;#39;t tell which entry is for which trail&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-elevation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calculate Elevation&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;googleway::google_elevation()&lt;/code&gt; to access the Google Elevation API and calculate elevation for every lon/lat pair from the GPX files. Unfortunately, the API accepts and returns only a few requests at a time (~200 rows for these files). We have over 51,000 rows of data. So, we can create groups for every 200 rows and use a loop to make a call for each&lt;/p&gt;
&lt;p&gt;This results in a list, so we can then create a tibble pulling out the data we want.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lonlat_dat &amp;lt;-
  gpx_dat %&amp;gt;%
  map_df(., ~.x$&amp;quot;routes&amp;quot;[[1]], .id = &amp;quot;trail&amp;quot;) %&amp;gt;%
  select(trail, lon, lat) %&amp;gt;% 
  group_by(trail) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(group_number = (1:nrow(.) %/% 200) + 1) # https://stackoverflow.com/questions/32078578/how-to-group-by-every-7-rows-and-aggregate-those-7-values-by-median

dat_lapply &amp;lt;- lapply(1:max(lonlat_dat$group_number), function(x) {
  Sys.sleep(3)
  
  lonlat_dat %&amp;gt;%
    filter(group_number == x) %&amp;gt;% # added a filter so you only pull a subset of the data.
    do(elev_dat =
         data.frame(
           google_elevation(
             df_locations = dplyr::select(., lon, lat),
             location_type = &amp;quot;individual&amp;quot;,
             simplify = TRUE)))
  })

dat_lapply_elev_dat &amp;lt;-
  dat_lapply %&amp;gt;%
  map(., ~ .x$&amp;quot;elev_dat&amp;quot;[[1]])

elev_df &amp;lt;-
  dat_lapply_elev_dat %&amp;gt;% {
    tibble(
      elevation = map(., ~ .x$&amp;quot;results.elevation&amp;quot;),
      lon = map(., ~ .x$&amp;quot;results.location&amp;quot;[[&amp;quot;lng&amp;quot;]]),
      lat = map(.,  ~ .x$&amp;quot;results.location&amp;quot;[[&amp;quot;lat&amp;quot;]])
    )
  } %&amp;gt;% 
  unnest(.id = &amp;quot;group_number&amp;quot;) %&amp;gt;% 
  select(group_number, elevation, lon, lat)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-distance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Calculate Distance&lt;/h2&gt;
&lt;p&gt;Now we have a list of trails, longitudes and latitudes along their paths, and the elevation for each of those points. Now we want to calculate the distance along the paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We bring back &lt;code&gt;lonlat_dat&lt;/code&gt; so we know what trails with which each points are associated.&lt;/li&gt;
&lt;li&gt;To use calculate distance, we can use &lt;code&gt;distHaversine()&lt;/code&gt; with two sets of lon/lat. We create the second set of lon/lat by creating a new variable that takes the “next” value in a vector (so we’re calculating the distance between point A and point B, point B to point C, and so on).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cumsum()&lt;/code&gt; accumulates the distances between each set of lon/lat.&lt;/li&gt;
&lt;li&gt;Finally, we calculate the elevation gain for each hike.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hiking_dat &amp;lt;-
  plyr::join(elev_df, lonlat_dat, type = &amp;quot;left&amp;quot;, match = &amp;quot;first&amp;quot;) %&amp;gt;% 
  group_by(trail) %&amp;gt;% 
  mutate(elev_feet = elevation * 3.281, # to convert to feet
         lon2 = lead(lon, 1),
         lat2 = lead(lat, 1)) %&amp;gt;%
  ungroup() %&amp;gt;% 
  mutate(dist = distHaversine(hiking_dat[, 2:3], hiking_dat[, 7:8])/1609.344) %&amp;gt;% # to convert to miles
  group_by(trail) %&amp;gt;% 
  mutate(cumdist = cumsum(dist),
         elev_gain = elev_feet - first(elev_feet)) %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-additional-tables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Create Additional Tables&lt;/h2&gt;
&lt;p&gt;For nerdy kicks, I also wanted to find out my ‘average’ hike - that is, the average distance, the average elevation, and the average elevation for each distance. I also wanted to see the total distance and elevation for each trail for which I pulled data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;avg_elev &amp;lt;- # average elevation by distance
  hiking_dat %&amp;gt;% 
  group_by(round(cumdist, 1)) %&amp;gt;% 
  summarize(mean(elev_gain))

hiking_dat_by_trail &amp;lt;- # total gain/distance by trail
  hiking_dat %&amp;gt;% 
  select(trail, cumdist, elev_gain) %&amp;gt;% 
  group_by(trail) %&amp;gt;%
  summarize(tot_dist = max(cumdist, na.rm = T),
            tot_elev_gain = max(elev_gain)) %&amp;gt;% 
  mutate(tot_dist_scaled = scale(tot_dist), # for cluster analysis
         tot_elev_scaled = scale(tot_elev_gain))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;viz&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Visualizations&lt;/h1&gt;
&lt;p&gt;Below is the code for the visualizations presented above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(viridis)
library(ggridges)
library(cluster)
library(factoextra)

# joy plot

ggplot() + 
  geom_density_ridges(data = na.omit(hiking_dat),
                      aes(x = cumdist,
                          y = trail,
                          group = trail),
                      fill = &amp;quot;#00204c&amp;quot;,
                      rel_min_height = 0.01
                      ) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# average hike

ggplot() + 
  geom_ridgeline(data = hiking_dat,
                 aes(x = cumdist,
                     y = trail,
                     group = trail,
                     height = elev_gain),
                 color = &amp;quot;#c9b869&amp;quot;,
                 alpha = 0) +
  geom_line(data = avg_elev,
            aes(x = `round(cumdist, 1)`,
                y = `mean(elev_gain)`),
            color = &amp;quot;#00204c&amp;quot;,
            size = 2) +
  scale_x_continuous(name = &amp;quot;Cumulative Distance (miles)&amp;quot;) +
  scale_y_continuous(name = &amp;quot;Cumulative Elevation (ft)&amp;quot;, limits = c(0, 5000)) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# aggregate data scatterplot

ggplot() + 
  geom_point(data = hiking_dat_by_trail,
             aes(x = tot_dist,
                 y = tot_elev_gain,
                 color = tot_elev_gain,
                 size = tot_dist)) +
  scale_x_continuous(name = &amp;quot;Total Distance (miles)&amp;quot;) +
  scale_y_continuous(name = &amp;quot;Total Elevation (ft)&amp;quot;) +
  scale_color_viridis(option = &amp;quot;cividis&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# cluster analysis

fviz_nbclust(hiking_dat_by_trail[, 4:5], kmeans, method = &amp;quot;wss&amp;quot;) # finding optimal number of clusters
k4 &amp;lt;- kmeans(hiking_dat_by_trail[, 4:5], centers = 4, nstart = 25) # calculating clusters

fviz_cluster(k4, data = hiking_dat_by_trail)  +
  scale_x_continuous(name = &amp;quot;Scaled Total Distance (miles)&amp;quot;) +
  scale_y_continuous(name = &amp;quot;Scaled Total Elevation (ft)&amp;quot;) +
  scale_color_viridis(option = &amp;quot;cividis&amp;quot;, discrete = T) +
  scale_fill_viridis(option = &amp;quot;cividis&amp;quot;, discrete = T) +
  theme_minimal()

#  cumulative distance barplot

hiking_dat_by_trail %&amp;gt;% 
  mutate(cumdist = cumsum(tot_dist)) %&amp;gt;% 
  ggplot(aes(x = trail,
             y = cumdist,
             fill = cumdist)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  scale_fill_viridis(option = &amp;quot;cividis&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# distance histogram

hiking_dat_by_trail %&amp;gt;% 
  ggplot(aes(x = tot_dist)) +
  geom_histogram(fill = &amp;quot;#00204c&amp;quot;) +
  xlab(&amp;quot;Trail Total Distance (miles)&amp;quot;) +
  ylab(&amp;quot;Count&amp;quot;) +
  scale_fill_viridis(option = &amp;quot;cividis&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# cumulative elevation barplot

hiking_dat_by_trail %&amp;gt;% 
  mutate(cumelev = cumsum(tot_elev_gain)) %&amp;gt;% 
  ggplot(aes(x = trail,
             y = cumelev,
             fill = cumelev)) +
  geom_bar(stat = &amp;quot;identity&amp;quot;) +
  scale_fill_viridis(option = &amp;quot;cividis&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)

# elevation histogram

hiking_dat_by_trail %&amp;gt;% 
  ggplot(aes(x = tot_elev_gain)) +
  geom_histogram(fill = &amp;quot;#00204c&amp;quot;) +
  xlab(&amp;quot;Trail Total Elevation (ft)&amp;quot;) +
  ylab(&amp;quot;Count&amp;quot;) +
  scale_fill_viridis(option = &amp;quot;cividis&amp;quot;) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
  </item>
  
</channel>
  </rss>